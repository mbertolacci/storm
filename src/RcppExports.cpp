// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// rgevVector
NumericVector rgevVector(int n, double mu, double sigma, double xi);
RcppExport SEXP positivemixtures_rgevVector(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP xiSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type xi(xiSEXP);
    __result = Rcpp::wrap(rgevVector(n, mu, sigma, xi));
    return __result;
END_RCPP
}
// estimatePwm
double estimatePwm(NumericVector x, int r);
RcppExport SEXP positivemixtures_estimatePwm(SEXP xSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    __result = Rcpp::wrap(estimatePwm(x, r));
    return __result;
END_RCPP
}
// gevPwmEstimate
NumericVector gevPwmEstimate(NumericVector x);
RcppExport SEXP positivemixtures_gevPwmEstimate(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    __result = Rcpp::wrap(gevPwmEstimate(x));
    return __result;
END_RCPP
}
// gevPwmEstimateConstrained
NumericVector gevPwmEstimateConstrained(NumericVector x, double supportLim);
RcppExport SEXP positivemixtures_gevPwmEstimateConstrained(SEXP xSEXP, SEXP supportLimSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type supportLim(supportLimSEXP);
    __result = Rcpp::wrap(gevPwmEstimateConstrained(x, supportLim));
    return __result;
END_RCPP
}
// hmmSample
List hmmSample(unsigned int nSamples, unsigned int burnIn, NumericVector yR, StringVector distributionNames, List priors, List samplingSchemes, IntegerVector zStart, List thetaStart, int thetaSampleThinning, int zSampleThinning, int yMissingSampleThinning, unsigned int verbose);
RcppExport SEXP positivemixtures_hmmSample(SEXP nSamplesSEXP, SEXP burnInSEXP, SEXP yRSEXP, SEXP distributionNamesSEXP, SEXP priorsSEXP, SEXP samplingSchemesSEXP, SEXP zStartSEXP, SEXP thetaStartSEXP, SEXP thetaSampleThinningSEXP, SEXP zSampleThinningSEXP, SEXP yMissingSampleThinningSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< unsigned int >::type nSamples(nSamplesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type burnIn(burnInSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type yR(yRSEXP);
    Rcpp::traits::input_parameter< StringVector >::type distributionNames(distributionNamesSEXP);
    Rcpp::traits::input_parameter< List >::type priors(priorsSEXP);
    Rcpp::traits::input_parameter< List >::type samplingSchemes(samplingSchemesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type zStart(zStartSEXP);
    Rcpp::traits::input_parameter< List >::type thetaStart(thetaStartSEXP);
    Rcpp::traits::input_parameter< int >::type thetaSampleThinning(thetaSampleThinningSEXP);
    Rcpp::traits::input_parameter< int >::type zSampleThinning(zSampleThinningSEXP);
    Rcpp::traits::input_parameter< int >::type yMissingSampleThinning(yMissingSampleThinningSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type verbose(verboseSEXP);
    __result = Rcpp::wrap(hmmSample(nSamples, burnIn, yR, distributionNames, priors, samplingSchemes, zStart, thetaStart, thetaSampleThinning, zSampleThinning, yMissingSampleThinning, verbose));
    return __result;
END_RCPP
}
// independentSample
List independentSample(unsigned int nSamples, unsigned int burnIn, NumericVector yR, StringVector distributionNames, List priors, List samplingSchemes, IntegerVector zStart, List thetaStart, int thetaSampleThinning, int zSampleThinning, int yMissingSampleThinning, unsigned int verbose);
RcppExport SEXP positivemixtures_independentSample(SEXP nSamplesSEXP, SEXP burnInSEXP, SEXP yRSEXP, SEXP distributionNamesSEXP, SEXP priorsSEXP, SEXP samplingSchemesSEXP, SEXP zStartSEXP, SEXP thetaStartSEXP, SEXP thetaSampleThinningSEXP, SEXP zSampleThinningSEXP, SEXP yMissingSampleThinningSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< unsigned int >::type nSamples(nSamplesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type burnIn(burnInSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type yR(yRSEXP);
    Rcpp::traits::input_parameter< StringVector >::type distributionNames(distributionNamesSEXP);
    Rcpp::traits::input_parameter< List >::type priors(priorsSEXP);
    Rcpp::traits::input_parameter< List >::type samplingSchemes(samplingSchemesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type zStart(zStartSEXP);
    Rcpp::traits::input_parameter< List >::type thetaStart(thetaStartSEXP);
    Rcpp::traits::input_parameter< int >::type thetaSampleThinning(thetaSampleThinningSEXP);
    Rcpp::traits::input_parameter< int >::type zSampleThinning(zSampleThinningSEXP);
    Rcpp::traits::input_parameter< int >::type yMissingSampleThinning(yMissingSampleThinningSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type verbose(verboseSEXP);
    __result = Rcpp::wrap(independentSample(nSamples, burnIn, yR, distributionNames, priors, samplingSchemes, zStart, thetaStart, thetaSampleThinning, zSampleThinning, yMissingSampleThinning, verbose));
    return __result;
END_RCPP
}
// logisticErgodicP
NumericMatrix logisticErgodicP(NumericMatrix deltaSamplesR, NumericMatrix zSamplesR, IntegerVector z0SamplesR, NumericMatrix explanatoryVariablesR, unsigned int order);
RcppExport SEXP positivemixtures_logisticErgodicP(SEXP deltaSamplesRSEXP, SEXP zSamplesRSEXP, SEXP z0SamplesRSEXP, SEXP explanatoryVariablesRSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type deltaSamplesR(deltaSamplesRSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type zSamplesR(zSamplesRSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z0SamplesR(z0SamplesRSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type explanatoryVariablesR(explanatoryVariablesRSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type order(orderSEXP);
    __result = Rcpp::wrap(logisticErgodicP(deltaSamplesR, zSamplesR, z0SamplesR, explanatoryVariablesR, order));
    return __result;
END_RCPP
}
// logisticPredictedP
NumericMatrix logisticPredictedP(NumericMatrix deltaSamplesR, IntegerVector z0SamplesR, NumericMatrix explanatoryVariablesR, unsigned int order);
RcppExport SEXP positivemixtures_logisticPredictedP(SEXP deltaSamplesRSEXP, SEXP z0SamplesRSEXP, SEXP explanatoryVariablesRSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type deltaSamplesR(deltaSamplesRSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z0SamplesR(z0SamplesRSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type explanatoryVariablesR(explanatoryVariablesRSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type order(orderSEXP);
    __result = Rcpp::wrap(logisticPredictedP(deltaSamplesR, z0SamplesR, explanatoryVariablesR, order));
    return __result;
END_RCPP
}
// logisticGenerate
List logisticGenerate(NumericMatrix deltaR, NumericMatrix explanatoryVariablesR, NumericVector thetaLower, NumericVector thetaUpper, StringVector distributionNames, unsigned int order);
RcppExport SEXP positivemixtures_logisticGenerate(SEXP deltaRSEXP, SEXP explanatoryVariablesRSEXP, SEXP thetaLowerSEXP, SEXP thetaUpperSEXP, SEXP distributionNamesSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type deltaR(deltaRSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type explanatoryVariablesR(explanatoryVariablesRSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type thetaLower(thetaLowerSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type thetaUpper(thetaUpperSEXP);
    Rcpp::traits::input_parameter< StringVector >::type distributionNames(distributionNamesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type order(orderSEXP);
    __result = Rcpp::wrap(logisticGenerate(deltaR, explanatoryVariablesR, thetaLower, thetaUpper, distributionNames, order));
    return __result;
END_RCPP
}
// logisticSample
List logisticSample(int nSamples, int burnIn, List panelYR, List panelExplanatoryVariablesR, unsigned int order, StringVector distributionNames, List priors, List samplingSchemes, List panelZStart, List thetaStart, List panelDeltaStart, NumericMatrix deltaFamilyMeanStart, NumericMatrix deltaFamilyVarianceStart, int thetaSampleThinning, int zSampleThinning, int yMissingSampleThinning, unsigned int verbose);
RcppExport SEXP positivemixtures_logisticSample(SEXP nSamplesSEXP, SEXP burnInSEXP, SEXP panelYRSEXP, SEXP panelExplanatoryVariablesRSEXP, SEXP orderSEXP, SEXP distributionNamesSEXP, SEXP priorsSEXP, SEXP samplingSchemesSEXP, SEXP panelZStartSEXP, SEXP thetaStartSEXP, SEXP panelDeltaStartSEXP, SEXP deltaFamilyMeanStartSEXP, SEXP deltaFamilyVarianceStartSEXP, SEXP thetaSampleThinningSEXP, SEXP zSampleThinningSEXP, SEXP yMissingSampleThinningSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type nSamples(nSamplesSEXP);
    Rcpp::traits::input_parameter< int >::type burnIn(burnInSEXP);
    Rcpp::traits::input_parameter< List >::type panelYR(panelYRSEXP);
    Rcpp::traits::input_parameter< List >::type panelExplanatoryVariablesR(panelExplanatoryVariablesRSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< StringVector >::type distributionNames(distributionNamesSEXP);
    Rcpp::traits::input_parameter< List >::type priors(priorsSEXP);
    Rcpp::traits::input_parameter< List >::type samplingSchemes(samplingSchemesSEXP);
    Rcpp::traits::input_parameter< List >::type panelZStart(panelZStartSEXP);
    Rcpp::traits::input_parameter< List >::type thetaStart(thetaStartSEXP);
    Rcpp::traits::input_parameter< List >::type panelDeltaStart(panelDeltaStartSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type deltaFamilyMeanStart(deltaFamilyMeanStartSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type deltaFamilyVarianceStart(deltaFamilyVarianceStartSEXP);
    Rcpp::traits::input_parameter< int >::type thetaSampleThinning(thetaSampleThinningSEXP);
    Rcpp::traits::input_parameter< int >::type zSampleThinning(zSampleThinningSEXP);
    Rcpp::traits::input_parameter< int >::type yMissingSampleThinning(yMissingSampleThinningSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type verbose(verboseSEXP);
    __result = Rcpp::wrap(logisticSample(nSamples, burnIn, panelYR, panelExplanatoryVariablesR, order, distributionNames, priors, samplingSchemes, panelZStart, thetaStart, panelDeltaStart, deltaFamilyMeanStart, deltaFamilyVarianceStart, thetaSampleThinning, zSampleThinning, yMissingSampleThinning, verbose));
    return __result;
END_RCPP
}
// logisticSampleY
List logisticSampleY(List panelExplanatoryVariablesR, List panelDeltaSampleR, NumericMatrix thetaLowerSampleR, NumericMatrix thetaUpperSampleR, StringVector distributionNames);
RcppExport SEXP positivemixtures_logisticSampleY(SEXP panelExplanatoryVariablesRSEXP, SEXP panelDeltaSampleRSEXP, SEXP thetaLowerSampleRSEXP, SEXP thetaUpperSampleRSEXP, SEXP distributionNamesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type panelExplanatoryVariablesR(panelExplanatoryVariablesRSEXP);
    Rcpp::traits::input_parameter< List >::type panelDeltaSampleR(panelDeltaSampleRSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type thetaLowerSampleR(thetaLowerSampleRSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type thetaUpperSampleR(thetaUpperSampleRSEXP);
    Rcpp::traits::input_parameter< StringVector >::type distributionNames(distributionNamesSEXP);
    __result = Rcpp::wrap(logisticSampleY(panelExplanatoryVariablesR, panelDeltaSampleR, thetaLowerSampleR, thetaUpperSampleR, distributionNames));
    return __result;
END_RCPP
}
// benchmarkLogistic
void benchmarkLogistic(unsigned int nDeltas, unsigned int nValues, unsigned int nIterations);
RcppExport SEXP positivemixtures_benchmarkLogistic(SEXP nDeltasSEXP, SEXP nValuesSEXP, SEXP nIterationsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< unsigned int >::type nDeltas(nDeltasSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nValues(nValuesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nIterations(nIterationsSEXP);
    benchmarkLogistic(nDeltas, nValues, nIterations);
    return R_NilValue;
END_RCPP
}
